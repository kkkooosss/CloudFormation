AWSTemplateFormatVersion: 2010-09-09
Description: 'EC2: instance with auto-recovery, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Parent Stacks
        Parameters:
          - ParentVPCStack
          - ParentSSHBastionStack
          - ParentAlertStack
          - ParentZoneStack
          - ParentClientStack1
          - ParentClientStack2
          - ParentClientStack3
      - Label:
          default: EC2 Parameters
        Parameters:
          - InstanceType
          - Name
          - SubnetName
          - KeyName
          - IAMUserSSHAccess
          - SystemsManagerAccess
          - LogsRetentionInDays
          - SubDomainNameWithDot
          - UserData
          - IngressTcpPort1
          - IngressTcpPort2
          - IngressTcpPort3
          - ManagedPolicyArns
  'AWS::CloudFormation::Designer':
    45dcc584-0534-4369-9561-35e8a8610134:
      size:
        width: 60
        height: 60
      position:
        x: 270
        'y': 90
      z: 1
      embeds: []
    f55cc57d-bb94-4db3-84be-54b1e27bf283:
      size:
        width: 150
        height: 150
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
    dc41c50f-f948-4e41-9abc-c358bdae5767:
      size:
        width: 60
        height: 60
      position:
        x: 270
        'y': 210
      z: 1
      embeds: []
    8b1cb86c-6a39-4c2d-9144-54e8fd8d5318:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 300
      z: 1
      embeds: []
      isassociatedwith:
        - dc41c50f-f948-4e41-9abc-c358bdae5767
    9dc230b3-90d8-4d2b-bab6-07629bef81c3:
      size:
        width: 60
        height: 60
      position:
        x: 390
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - dc41c50f-f948-4e41-9abc-c358bdae5767
    92ce0cd0-a1c9-4b4a-9262-1a6c906f3d98:
      size:
        width: 60
        height: 60
      position:
        x: 390
        'y': 210
      z: 1
      embeds: []
      isassociatedwith:
        - 45dcc584-0534-4369-9561-35e8a8610134
    90e47fc6-1972-4556-ba36-ac9f5e557bce:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - 92ce0cd0-a1c9-4b4a-9262-1a6c906f3d98
    668d152e-e589-4a4f-9f16-2a5d8d350a60:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 330
      z: 1
      embeds: []
    d141d518-5673-4c28-8935-9b30c7520832:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 420
      z: 1
      embeds: []
Parameters:
  ParentVPCStack:
    Description: Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.
    Type: String
  KeyName:
    Description: >-
      Optional key pair of the ec2-user to establish a SSH connection to the EC2
      instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: ''
  IAMUserSSHAccess:
    Description: >-
      Synchronize public keys of IAM users to enable personalized SSH access
      (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  SystemsManagerAccess:
    Description: Enable AWS Systems Manager agent and authorization.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  InstanceType:
    Description: The instance type for the EC2 instance.
    Type: String
    Default: t2.micro
  Name:
    Description: The name for the EC2 instance.
    Type: String
    Default: test
  SubnetName:
    Description: Subnet name of parent VPC stack based on vpc/vpc-*azs.yaml template.
    Type: String
    Default: SubnetAPublic
    AllowedValues:
      - SubnetAPublic
      - SubnetAPrivate
      - SubnetBPublic
      - SubnetBPrivate
  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain log events.
    Type: Number
    Default: 5
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b69ea66ff7391e80
    us-east-2:
      AMI: ami-00c03f7f7f2ec15c3
    us-west-1:
      AMI: ami-0245d318c6788de52
    us-west-2:
      AMI: ami-04b762b4289fba92b
Conditions:
  HasKeyName: !Not 
    - !Equals 
      - Ref: KeyName
      - ''
  HasIAMUserSSHAccess: !Equals 
    - Ref: IAMUserSSHAccess
    - 'true'
  HasSystemsManagerAccess: !Equals 
    - Ref: SystemsManagerAccess
    - 'true'
  HasSSHBastionSecurityGroup: !Not 
    - !Equals 
      - !Ref ParentSSHBastionStack
      - ''
  HasNotSSHBastionSecurityGroup: !Equals 
    - !Ref ParentSSHBastionStack
    - ''
  HasAlertTopic: !Not 
    - !Equals 
      - !Ref ParentAlertStack
      - ''
  HasZone: !Not 
    - !Equals 
      - !Ref ParentZoneStack
      - ''
  HasIngressTcpPort1: !Not 
    - !Equals 
      - !Ref IngressTcpPort1
      - ''
  HasIngressTcpPort2: !Not 
    - !Equals 
      - !Ref IngressTcpPort2
      - ''
  HasIngressTcpPort3: !Not 
    - !Equals 
      - !Ref IngressTcpPort3
      - ''
  HasClientSecurityGroup1: !Not 
    - !Equals 
      - Ref: ParentClientStack1
      - ''
  HasClientSecurityGroup2: !Not 
    - !Equals 
      - Ref: ParentClientStack2
      - ''
  HasClientSecurityGroup3: !Not 
    - !Equals 
      - Ref: ParentClientStack3
      - ''
  HasManagedPolicyArns: !Not 
    - !Equals 
      - Ref: ManagedPolicyArns
      - ''
Resources:
  NetworkInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      GroupSet:
        - !Ref SecurityGroup
        - !If 
          - HasClientSecurityGroup1
          - 'Fn::ImportValue': !Sub '${ParentClientStack1}-ClientSecurityGroup'
          - !Ref 'AWS::NoValue'
        - !If 
          - HasClientSecurityGroup2
          - 'Fn::ImportValue': !Sub '${ParentClientStack2}-ClientSecurityGroup'
          - !Ref 'AWS::NoValue'
        - !If 
          - HasClientSecurityGroup3
          - 'Fn::ImportValue': !Sub '${ParentClientStack3}-ClientSecurityGroup'
          - !Ref 'AWS::NoValue'
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-${SubnetName}'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 92ce0cd0-a1c9-4b4a-9262-1a6c906f3d98
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f55cc57d-bb94-4db3-84be-54b1e27bf283
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref Name
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 45dcc584-0534-4369-9561-35e8a8610134
  SecurityGroupInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  SecurityGroupInSSHWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  SecurityGroupIngressTcpPort1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasIngressTcpPort1
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: !Ref IngressTcpPort1
      ToPort: !Ref IngressTcpPort1
      CidrIp: 0.0.0.0/0
  SecurityGroupIngressTcpPort2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasIngressTcpPort2
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: !Ref IngressTcpPort2
      ToPort: !Ref IngressTcpPort2
      CidrIp: 0.0.0.0/0
  SecurityGroupIngressTcpPort3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasIngressTcpPort3
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: !Ref IngressTcpPort3
      ToPort: !Ref IngressTcpPort3
      CidrIp: 0.0.0.0/0
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref IAMRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9dc230b3-90d8-4d2b-bab6-07629bef81c3
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns: !If 
        - HasManagedPolicyArns
        - !Split 
          - ','
          - !Ref ManagedPolicyArns
        - !Ref 'AWS::NoValue'
      Policies:
        - !If 
          - HasSystemsManagerAccess
          - PolicyName: ssm
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'ssmmessages:*'
                    - 'ssm:UpdateInstanceInformation'
                    - 'ec2messages:*'
                  Resource: '*'
          - !Ref 'AWS::NoValue'
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: !GetAtt Logs.Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: dc41c50f-f948-4e41-9abc-c358bdae5767
  IAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
        - !Ref IAMRole
      PolicyName: iam
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'iam:ListUsers'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'iam:ListSSHPublicKeys'
              - 'iam:GetSSHPublicKey'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8b1cb86c-6a39-4c2d-9144-54e8fd8d5318
  VirtualMachine:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: !If 
            - HasIAMUserSSHAccess
            - - awslogs
              - ssh-access
              - config
            - - awslogs
              - config
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub >
                [general]

                state_file = /var/lib/awslogs/agent-state

                [/var/log/amazon/ssm/amazon-ssm-agent.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/amazon/ssm/amazon-ssm-agent.log

                log_stream_name =
                {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log

                log_group_name = ${Logs}

                [/var/log/amazon/ssm/errors.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/amazon/ssm/errors.log

                log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log

                log_group_name = ${Logs}

                [/var/log/audit/audit.log]

                file = /var/log/audit/audit.log

                log_stream_name = {instance_id}/var/log/audit/audit.log

                log_group_name = ${Logs}

                [/var/log/awslogs.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/awslogs.log

                log_stream_name = {instance_id}/var/log/awslogs.log

                log_group_name = ${Logs}

                [/var/log/boot.log]

                file = /var/log/boot.log

                log_stream_name = {instance_id}/var/log/boot.log

                log_group_name = ${Logs}

                [/var/log/cfn-hup.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/cfn-hup.log

                log_stream_name = {instance_id}/var/log/cfn-hup.log

                log_group_name = ${Logs}

                [/var/log/cfn-init-cmd.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/cfn-init-cmd.log

                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log

                log_group_name = ${Logs}

                [/var/log/cfn-init.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/cfn-init.log

                log_stream_name = {instance_id}/var/log/cfn-init.log

                log_group_name = ${Logs}

                [/var/log/cfn-wire.log]

                datetime_format = %Y-%m-%d %H:%M:%S

                file = /var/log/cfn-wire.log

                log_stream_name = {instance_id}/var/log/cfn-wire.log

                log_group_name = ${Logs}

                [/var/log/cloud-init-output.log]

                file = /var/log/cloud-init-output.log

                log_stream_name = {instance_id}/var/log/cloud-init-output.log

                log_group_name = ${Logs}

                [/var/log/cloud-init.log]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/cloud-init.log

                log_stream_name = {instance_id}/var/log/cloud-init.log

                log_group_name = ${Logs}

                [/var/log/cron]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/cron

                log_stream_name = {instance_id}/var/log/cron

                log_group_name = ${Logs}

                [/var/log/dmesg]

                file = /var/log/dmesg

                log_stream_name = {instance_id}/var/log/dmesg

                log_group_name = ${Logs}

                [/var/log/grubby_prune_debug]

                file = /var/log/grubby_prune_debug

                log_stream_name = {instance_id}/var/log/grubby_prune_debug

                log_group_name = ${Logs}

                [/var/log/maillog]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/maillog

                log_stream_name = {instance_id}/var/log/maillog

                log_group_name = ${Logs}

                [/var/log/messages]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/messages

                log_stream_name = {instance_id}/var/log/messages

                log_group_name = ${Logs}

                [/var/log/secure]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/secure

                log_stream_name = {instance_id}/var/log/secure

                log_group_name = ${Logs}

                [/var/log/yum.log]

                datetime_format = %b %d %H:%M:%S

                file = /var/log/yum.log

                log_stream_name = {instance_id}/var/log/yum.log

                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogsd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - awslogs
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
        ssh-access:
          files:
            /opt/authorized_keys_command.sh:
              content: >
                #!/bin/bash -e

                if [ -z "$1" ]; then
                  exit 1
                fi

                UnsaveUserName="$1"

                UnsaveUserName=${UnsaveUserName//".plus."/"+"}

                UnsaveUserName=${UnsaveUserName//".equal."/"="}

                UnsaveUserName=${UnsaveUserName//".comma."/","}

                UnsaveUserName=${UnsaveUserName//".at."/"@"}

                aws iam list-ssh-public-keys --user-name "$UnsaveUserName"
                --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]"
                --output text | while read -r KeyId; do
                  aws iam get-ssh-public-key --user-name "$UnsaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            /opt/import_users.sh:
              content: >
                #!/bin/bash -e

                aws iam list-users --query "Users[].[UserName]" --output text |
                while read User; do
                  SaveUserName="$User"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  if [ "${#SaveUserName}" -le "32" ]; then
                    if ! id -u "$SaveUserName" >/dev/null 2>&1; then
                      #sudo will read each file in /etc/sudoers.d, skipping file names that end in ‘~’ or contain a ‘.’ character to avoid causing problems with package manager or editor temporary/backup files.
                      SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                      /usr/sbin/useradd "$SaveUserName"
                      echo "$SaveUserName ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$SaveUserFileName"
                    fi
                  else
                    echo "Can not import IAM user ${SaveUserName}. User name is longer than 32 characters."
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            /etc/cron.d/import_users:
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
          commands:
            a_configure_sshd_command:
              command: >-
                sed -e '/AuthorizedKeysCommand / s/^#*/#/' -i
                /etc/ssh/sshd_config; echo -e '\nAuthorizedKeysCommand
                /opt/authorized_keys_command.sh' >> /etc/ssh/sshd_config
              test: >-
                ! grep -q '^AuthorizedKeysCommand
                /opt/authorized_keys_command.sh' /etc/ssh/sshd_config
            b_configure_sshd_commanduser:
              command: >-
                sed -e '/AuthorizedKeysCommandUser / s/^#*/#/' -i
                /etc/ssh/sshd_config; echo -e '\nAuthorizedKeysCommandUser
                nobody' >> /etc/ssh/sshd_config
              test: >-
                ! grep -q '^AuthorizedKeysCommandUser nobody'
                /etc/ssh/sshd_config
            c_import_users:
              command: ./import_users.sh
              cwd: /opt
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                  - a_configure_sshd_command
                  - b_configure_sshd_commanduser
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.VirtualMachine.Metadata.AWS::CloudFormation::Init

                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName}
                --region=${AWS::Region} --resource=VirtualMachine

                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              amazon-ssm-agent:
                enabled: !If 
                  - HasSystemsManagerAccess
                  - true
                  - false
                ensureRunning: !If 
                  - HasSystemsManagerAccess
                  - true
                  - false
      'AWS::CloudFormation::Designer':
        id: 90e47fc6-1972-4556-ba36-ac9f5e557bce
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType
      KeyName: !If 
        - HasKeyName
        - !Ref KeyName
        - !Ref 'AWS::NoValue'
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -ex

          trap '/opt/aws/bin/cfn-signal -e 1 --region ${AWS::Region} --stack
          ${AWS::StackName} --resource VirtualMachine' ERR

          ${UserData}

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource
          VirtualMachine --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack
          ${AWS::StackName} --resource VirtualMachine
      Tags:
        - Key: Name
          Value: !Ref Name
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
  RecoveryAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Recovering instance when underlying hardware fails.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - !Sub 'arn:aws:automate:${AWS::Region}:ec2:recover'
      Dimensions:
        - Name: InstanceId
          Value: !Ref VirtualMachine
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d141d518-5673-4c28-8935-9b30c7520832
  CPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Average CPU utilization over last 10 minutes higher than 80%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
        - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
        - Name: InstanceId
          Value: !Ref VirtualMachine
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 668d152e-e589-4a4f-9f16-2a5d8d350a60
Outputs:
  TemplateID:
    Description: cloudonaut.io template id.
    Value: ec2/ec2-auto-recovery
  TemplateVersion:
    Description: cloudonaut.io template version.
    Value: 10.5.0
  StackName:
    Description: Stack name.
    Value: !Sub '${AWS::StackName}'
  InstanceId:
    Description: The EC2 instance id.
    Value: !Ref VirtualMachine
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
    PrivateIPAddress:
    Description: The private IP address of the EC2 instance.
    Value: !GetAtt NetworkInterface.PrimaryPrivateIpAddress
    Export:
      Name: !Sub '${AWS::StackName}-PrivateIPAddress'
